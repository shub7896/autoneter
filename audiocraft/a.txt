from dotenv import load_dotenv
from audiocraft.models import MusicGen
import streamlit as st
import torch
import torchaudio
import os
import numpy as np
import base64
import pathlib
import textwrap
import google.generativeai as genai
from IPython.display import display
from IPython.display import Markdown
import pickle
import pandas as pd
import requests

load_dotenv()

os.getenv("GOOGLE_API_KEY")
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))


def get_gemini_response(question):
    model = genai.GenerativeModel('gemini-pro')
    response = model.generate_content(question)
    return response.text


@st.cache_resource
def load_model():
    model = MusicGen.get_pretrained('facebook/musicgen-small')
    return model


def generate_music_tensors(description, duration: int):
    model = load_model()

    model.set_generation_params(
        use_sampling=True,
        top_k=250,
        duration=duration
    )

    output = model.generate(
        descriptions=[description],
        progress=True,
        return_tokens=True
    )

    return output[0]


def save_audio(samples: torch.Tensor):
    sample_rate = 32000
    save_path = "audio_output/"
    assert samples.dim() == 2 or samples.dim() == 3

    samples = samples.detach().cpu()
    if samples.dim() == 2:
        samples = samples[None, ...]

    for idx, audio in enumerate(samples):
        audio_path = os.path.join(save_path, f"audio_{idx}.wav")
        torchaudio.save(audio_path, audio, sample_rate)

    return audio_path


def get_binary_file_downloader_html(bin_file, file_label='File'):
    with open(bin_file, 'rb') as f:
        data = f.read()
    bin_str = base64.b64encode(data).decode()
    href = f'<a href="data:application/octet-stream;base64,{bin_str}" download="{os.path.basename(bin_file)}">Download {file_label}</a>'
    return href


def fetch_poster_and_link(music_title):
    try:
        API_KEY = "aedd7d6e8bdb5297123ae81e2c77c321"
        response = requests.get(f"http://ws.audioscrobbler.com/2.0/?method=track.search&track={music_title}&api_key={API_KEY}&format=json")
        response.raise_for_status()  # Raise an exception for HTTP errors
        data = response.json()
        tracks = data.get('results', {}).get('trackmatches', {}).get('track', [])
        if tracks:
            # Assuming the first track found is the one we want
            poster_url = tracks[0].get('image', [])[2].get('#text', '')from dotenv import load_dotenv
from audiocraft.models import MusicGen
import streamlit as st
import torch
import torchaudio
import os
import numpy as np
import base64
import pathlib
import textwrap
import google.generativeai as genai
from IPython.display import display
from IPython.display import Markdown
import pickle
import pandas as pd
import requests
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials

CLIENT_ID = "70a9fb89662f4dac8d07321b259eaad7"
CLIENT_SECRET = "4d6710460d764fbbb8d8753dc094d131"

load_dotenv()
os.getenv("GOOGLE_API_KEY")
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))
def get_gemini_response(question, chat):
    response = chat.send_message(question, stream=True)
    return response

def show_chatbot(chat):
    st.title("Conversational Music Recommender Chatbot")
    st.write("This feature is coming soon...")

    if 'chat_history' not in st.session_state:
        st.session_state['chat_history'] = []

    input = st.text_input("Input: ", key="input")
    submit = st.button("Ask the question")

    if submit and input:
        response = get_gemini_response(input, chat)
        # Add user query and response to session state chat history
        st.session_state['chat_history'].append(("You", input))
        st.subheader("The Response is")
        for chunk in response:
            st.write(chunk.text)
            st.session_state['chat_history'].append(("Bot", chunk.text))
    st.subheader("The Chat History is")
        
    for role, text in st.session_state['chat_history']:
        st.write(f"{role}: {text}")




# Initialize the Spotify client
client_credentials_manager = SpotifyClientCredentials(client_id=CLIENT_ID, client_secret=CLIENT_SECRET)
sp = spotipy.Spotify(client_credentials_manager=client_credentials_manager)

def get_song_album_cover_url(song_name, artist_name):
    search_query = f"track:{song_name} artist:{artist_name}"
    results = sp.search(q=search_query, type="track")

    if results and results["tracks"]["items"]:
        track = results["tracks"]["items"][0]
        album_cover_url = track["album"]["images"][0]["url"]
        return album_cover_url
    else:
        return "https://i.postimg.cc/0QNxYz4V/social.png"

@st.cache_resource
def load_model():
    model = MusicGen.get_pretrained('facebook/musicgen-small')
    return model


def generate_music_tensors(description, duration: int):
    model = load_model()

    model.set_generation_params(
        use_sampling=True,
        top_k=250,
        duration=duration
    )

    output = model.generate(
        descriptions=[description],
        progress=True,
        return_tokens=True
    )

    return output[0]


def save_audio(samples: torch.Tensor):
    sample_rate = 32000
    save_path = "audio_output/"
    assert samples.dim() == 2 or samples.dim() == 3

    samples = samples.detach().cpu()
    if samples.dim() == 2:
        samples = samples[None, ...]

    for idx, audio in enumerate(samples):
        audio_path = os.path.join(save_path, f"audio_{idx}.wav")
        torchaudio.save(audio_path, audio, sample_rate)

    return audio_path


def get_binary_file_downloader_html(bin_file, file_label='File'):
    with open(bin_file, 'rb') as f:
        data = f.read()
    bin_str = base64.b64encode(data).decode()
    href = f'<a href="data:application/octet-stream;base64,{bin_str}" download="{os.path.basename(bin_file)}">Download {file_label}</a>'
    return href

def recommend(music, similarity, song):
    index = music[music['song'] == song].index[0]
    distances = sorted(list(enumerate(similarity[index])), reverse=True, key=lambda x: x[1])
    recommended_music_names = []
    recommended_music_posters = []
    recommended_music_uris = []
    for i in distances[1:6]:
        # fetch the album cover and Spotify URI
        artist = music.iloc[i[0]].artist
        track_name = music.iloc[i[0]].song
        results = sp.search(q=f"track:{track_name} artist:{artist}", type="track")
        if results and results["tracks"]["items"]:
            album_cover_url = results["tracks"]["items"][0]["album"]["images"][0]["url"]
            spotify_uri = results["tracks"]["items"][0]["uri"]
            # Append recommended song name, album cover URL, and Spotify URI to lists
            recommended_music_names.append(track_name)
            recommended_music_posters.append(album_cover_url)
            recommended_music_uris.append(spotify_uri)

    return recommended_music_names, recommended_music_posters, recommended_music_uris

def fetch_poster_and_link(music_title):
    try:
        API_KEY = "aedd7d6e8bdb5297123ae81e2c77c321"
        response = requests.get(f"http://ws.audioscrobbler.com/2.0/?method=track.search&track={music_title}&api_key={API_KEY}&format=json")
        response.raise_for_status()  # Raise an exception for HTTP errors
        data = response.json()
        tracks = data.get('results', {}).get('trackmatches', {}).get('track', [])
        if tracks:
            # Assuming the first track found is the one we want
            poster_url = tracks[0].get('image', [])[2].get('#text', '')
            track_url = tracks[0].get('url', '')
            return poster_url, track_url
        else:
            st.error("No results found for the music title.")
            return None, None
    except requests.exceptions.RequestException as e:
        st.error(f"Error fetching poster and track link: {e}")
        return None, None
    except ValueError as ve:
        st.error(f"Error parsing JSON response: {ve}")
        return None, None


def recommend1(musics):
    try:
        music_index = music[music['title'] == musics].index[0]
        distances = similarity[music_index]
        music_list = sorted(list(enumerate(distances)), reverse=True, key=lambda x: x[1])[1:6]
        recommended_music = []
        recommended_music_poster = []
        recommended_music_links = []
        for i in music_list:
            music_title = music.iloc[i[0]].title
            poster_link, track_link = fetch_poster_and_link(music_title)
            if poster_link:
                recommended_music.append(music_title)
                recommended_music_poster.append(poster_link)
                recommended_music_links.append(track_link)
        return recommended_music, recommended_music_poster, recommended_music_links
    except IndexError:
        st.error("Music not found or insufficient data for recommendation.")
        return [], [], []


music_dict = pickle.load(open(r'C:\Users\maury\autonetics\music\music_rec_new\musicrec.pkl', 'rb'))
music = pd.DataFrame(music_dict)


similarity = pickle.load(open(r'C:\Users\maury\autonetics\music\music_rec_new\similarities.pkl', 'rb'))

def main():
    st.set_page_config(page_title="Autonetics: Your Music Companion", page_icon=":musical_note:")

    st.markdown(
        """
        <style>
            .sidebar .sidebar-content {
                background-color: #2c3e50;
                color: white;
            }
            .sidebar .sidebar-content .block-container {
                color: white;
            }
            .sidebar .sidebar-content .block-container .stRadio {
                color: white;
            }
            .sidebar .sidebar-content .block-container .stRadio label {
                color: white;
            }
            .stButton>button {
                background-color: #3498db;
                color: white;
                border-radius: 5px;
                padding: 10px 20px;
                font-size: 16px;
                transition: background-color 0.3s;
            }
            .stButton>button:hover {
                background-color: #2980b9;
            }
            .home-background {
                background-image: linear-gradient(rgba(52, 73, 94, 0.8), rgba(52, 73, 94, 0.8)), url('https://example.com/background.jpg');
                background-size: cover;
                background-repeat: no-repeat;
                background-position: center;
                height: 100vh;
                display: flex;
                align-items: center;
                justify-content: center;
                text-align: center;
            }
            .home-content {
                color: white;
                padding: 40px;
                border-radius: 20px;
                background-color: rgba(0, 0, 0, 0.5);
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
            }
            .primary-text {
                color: #3498db;
            }
            .secondary-text {
                color: #2ecc71;
            }
            .about-us {
                margin-top: 50px;
                display: flex;
                justify-content: space-around;
                flex-wrap: wrap;
                background-image: linear-gradient(rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0.8)), url('https://example.com/about_us_background.jpg');
                background-size: cover;
                background-repeat: no-repeat;
                background-position: center;
                padding: 40px;
                border-radius: 20px;
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
            }
            .creator-card {
                background-color: rgba(255, 255, 255, 0.8);
                padding: 20px;
                border-radius: 10px;
                margin: 20px;
                max-width: 300px;
                text-align: center;
            }
            .creator-name {
                font-size: 24px;
                font-weight: bold;
                margin-bottom: 10px;
            }
            .creator-role {
                font-size: 18px;
                margin-bottom: 10px;
            }
            .creator-photo {
                width: 150px;
                height: 150px;
                border-radius: 50%;
                margin-bottom: 10px;
            }
            .references {
                margin-top: 50px;
                background-image: linear-gradient(rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0.8)), url('https://example.com/references_background.jpg');
                background-size: cover;
                background-repeat: no-repeat;
                background-position: center;
                padding: 40px;
                border-radius: 20px;
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
            }
            .reference-card {
                background-color: rgba(255, 255, 255, 0.8);
                padding: 20px;
                border-radius: 10px;
                margin-bottom: 20px;
            }
            .references h2 {
                color: #3498db;
                margin-bottom: 20px;
            }
        </style>
        """,
        unsafe_allow_html=True
    )

    st.sidebar.title("Menu")
    selected_page = st.sidebar.radio("Go to", ["Home", "Conversational Music Recommender Chatbot", "Text-to-Music Generator", "Music Recommender Spotyfi English", "Music Recommender Lastfm Hindi"])

    if selected_page == "Home":
        show_homepage()
    elif selected_page == "Conversational Music Recommender Chatbot":
        chat = genai.GenerativeModel("gemini-pro").start_chat(history=[])
        show_chatbot(chat)
    elif selected_page == "Text-to-Music Generator":
        show_text_to_music_generator()
    elif selected_page == "Music Recommender Spotyfi English":
        music, similarity = load_data()
        show_music_recommender(music, similarity)
    elif selected_page == "Music Recommender Lastfm Hindi":
        show_music_recommender_lastfm()

def load_data():
    # Load data from pickle files
    music = pickle.load(open('df.pkl','rb'))
    similarity = pickle.load(open('similarity.pkl','rb'))
    return music, similarity

def show_homepage():
    st.markdown(
        """
        <div class="home-background">
            <div class="home-content">
                <h1 class="primary-text">Welcome to Our Interactive Hub!</h1>
                <p>Explore a world of dynamic features tailored just for you:</p>
                <ul>
                    <li><strong>Autonetics:</strong> Engage in real-time conversations with Gemini, our friendly chatbot. Ask questions, seek assistance, or simply chat for fun!</li>
                    <li><strong>Text-to-Music Generator:</strong> Transform your words into melodies with our innovative text-to-music generator. Watch as your messages come to life in beautiful compositions.</li>
                    <li><strong>Personalized Music Recommendations:</strong> Discover your next favorite song with our music recommendation engine powered by LastFM and Spotify APIs. Tailored just for you based on your preferences. Hindi and English both available. LastFM is used for Bollywood categories and Spotify is used for Hollywood categories.</li>
                </ul>
                <p>Experience the future of interaction and entertainment. Start exploring now!</p>
            </div>
        </div>
        """,
        unsafe_allow_html=True
    )

    st.markdown(
        """
        <div class="about-us">
            <div class="creator-card">
                <img src="https://example.com/creator1.jpg" class="creator-photo">
                <div class="creator-name">John Doe</div>
                <div class="creator-role">Co-founder & Developer</div>
            </div>
            <div class="creator-card">
                <img src="https://example.com/creator2.jpg" class="creator-photo">
                <div class="creator-name">Jane Smith</div>
                <div class="creator-role">Co-founder & Designer</div>
            </div>
        </div>
        """,
        unsafe_allow_html=True
    )

    st.markdown(
        """
        <div class="references">
            <h2>References</h2>
            <div class="reference-card">
                <p>This project is inspired by:</p>
                <ul>
                    <li>Streamlit - For building interactive web apps with Python</li>
                    <li>LastFM API - For music data and recommendations</li>
                    <li>Spotify API - For music streaming and recommendations</li>
                </ul>
            </div>
        </div>
        """,
        unsafe_allow_html=True
    )

def show_text_to_music_generator():
    st.title("Text to Music Generator🎵")

    with st.expander("See explanation"):
        st.write("Music Generator app built using Meta's Audiocraft library. We are using Music Gen Small model.")

    text_area = st.text_area("Enter your description.......")
    time_slider = st.slider("Select time duration (In Seconds)", 0, 20, 10)

    if text_area and time_slider:
        st.json({
            'Your Description': text_area,
            'Selected Time Duration (in Seconds)': time_slider
        })

        st.subheader("Generated Music")
        music_tensors = generate_music_tensors(text_area, time_slider)
        save_music_file = save_audio(music_tensors)
        audio_file = open(save_music_file, 'rb')
        audio_bytes = audio_file.read()
        st.audio(audio_bytes)
        st.markdown(get_binary_file_downloader_html(save_music_file, 'Audio'))

def show_music_recommender(music, similarity):
    st.title("Music Recommender Spotyfi English")

    music_list = music['song'].values
    selected_song = st.selectbox(
        "Type or select a song from the dropdown",
        music_list
    )

    if st.button('Show Recommendation'):
        recommended_music_names, recommended_music_posters, _ = recommend(music, similarity, selected_song)
        col1, col2, col3, col4, col5= st.columns(5)
        for i in range(5):
            with col1:
                st.write(recommended_music_names[i])
                st.image(recommended_music_posters[i])
                st.markdown(f"[Listen on Spotify](https://open.spotify.com/search/{recommended_music_names[i].replace(' ', '%20')})")

def show_music_recommender_lastfm():
    st.header("Music Recommender")
    st.title('Music Recommender Lastfm Hindi')

    selected_music_name = st.selectbox('Select a music you like', music['title'].values)

    if st.button('Recommend'):
        names, posters, links = recommend1(selected_music_name)

        col1, col2, col3, col4, col5 = st.columns(5)

        for name, poster, link in zip(names, posters, links):
            with col1:
                st.text(name)
                st.markdown(f"[![Poster]({poster})]({link})")


if __name__ == "__main__":
    main()

            track_url = tracks[0].get('url', '')
            return poster_url, track_url
        else:
            st.error("No results found for the music title.")
            return None, None
    except requests.exceptions.RequestException as e:
        st.error(f"Error fetching poster and track link: {e}")
        return None, None
    except ValueError as ve:
        st.error(f"Error parsing JSON response: {ve}")
        return None, None
from dotenv import load_dotenv
from audiocraft.models import MusicGen
import streamlit as st
import torch
import torchaudio
import os
import numpy as np
import base64
import pathlib
import textwrap
import google.generativeai as genai
from IPython.display import display
from IPython.display import Markdown
import pickle
import pandas as pd
import requests
import spotipy
from spotipy.oauth2 import SpotifyClientCredentials
import webbrowser

CLIENT_ID = "70a9fb89662f4dac8d07321b259eaad7"
CLIENT_SECRET = "4d6710460d764fbbb8d8753dc094d131"

load_dotenv()
os.getenv("GOOGLE_API_KEY")
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))
def get_gemini_response(question, chat):
    response = chat.send_message(question, stream=True)
    return response

def show_chatbot(chat):
    st.title("Conversational Music Recommender Chatbot")
    st.write("This feature is coming soon...")

    if 'chat_history' not in st.session_state:
        st.session_state['chat_history'] = []

    input = st.text_input("Input: ", key="input")
    submit = st.button("Ask the question")

    if submit and input:
        response = get_gemini_response(input, chat)
        # Add user query and response to session state chat history
        st.session_state['chat_history'].append(("You", input))
        st.subheader("The Response is")
        for chunk in response:
            st.write(chunk.text)
            st.session_state['chat_history'].append(("Bot", chunk.text))
    st.subheader("The Chat History is")
        
    for role, text in st.session_state['chat_history']:
        st.write(f"{role}: {text}")




# Initialize the Spotify client
client_credentials_manager = SpotifyClientCredentials(client_id=CLIENT_ID, client_secret=CLIENT_SECRET)
sp = spotipy.Spotify(client_credentials_manager=client_credentials_manager)

def get_song_album_cover_url(song_name, artist_name):
    search_query = f"track:{song_name} artist:{artist_name}"
    results = sp.search(q=search_query, type="track")

    if results and results["tracks"]["items"]:
        track = results["tracks"]["items"][0]
        album_cover_url = track["album"]["images"][0]["url"]
        return album_cover_url
    else:
        return "https://i.postimg.cc/0QNxYz4V/social.png"

@st.cache_resource
def load_model():
    model = MusicGen.get_pretrained('facebook/musicgen-small')
    return model


def generate_music_tensors(description, duration: int):
    model = load_model()

    model.set_generation_params(
        use_sampling=True,
        top_k=250,
        duration=duration
    )

    output = model.generate(
        descriptions=[description],
        progress=True,
        return_tokens=True
    )

    return output[0]


def save_audio(samples: torch.Tensor):
    sample_rate = 32000
    save_path = "audio_output/"
    assert samples.dim() == 2 or samples.dim() == 3

    samples = samples.detach().cpu()
    if samples.dim() == 2:
        samples = samples[None, ...]

    for idx, audio in enumerate(samples):
        audio_path = os.path.join(save_path, f"audio_{idx}.wav")
        torchaudio.save(audio_path, audio, sample_rate)

    return audio_path


def get_binary_file_downloader_html(bin_file, file_label='File'):
    with open(bin_file, 'rb') as f:
        data = f.read()
    bin_str = base64.b64encode(data).decode()
    href = f'<a href="data:application/octet-stream;base64,{bin_str}" download="{os.path.basename(bin_file)}">Download {file_label}</a>'
    return href

def recommend(music, similarity, song):
    index = music[music['song'] == song].index[0]
    distances = sorted(list(enumerate(similarity[index])), reverse=True, key=lambda x: x[1])
    recommended_music_names = []
    recommended_music_posters = []
    recommended_music_uris = []
    for i in distances[1:6]:
        # fetch the album cover and Spotify URI
        artist = music.iloc[i[0]].artist
        track_name = music.iloc[i[0]].song
        results = sp.search(q=f"track:{track_name} artist:{artist}", type="track")
        if results and results["tracks"]["items"]:
            album_cover_url = results["tracks"]["items"][0]["album"]["images"][0]["url"]
            spotify_uri = results["tracks"]["items"][0]["uri"]
            # Append recommended song name, album cover URL, and Spotify URI to lists
            recommended_music_names.append(track_name)
            recommended_music_posters.append(album_cover_url)
            recommended_music_uris.append(spotify_uri)

    return recommended_music_names, recommended_music_posters, recommended_music_uris

def fetch_poster_and_link(music_title):
    try:
        API_KEY = "aedd7d6e8bdb5297123ae81e2c77c321"
        response = requests.get(f"http://ws.audioscrobbler.com/2.0/?method=track.search&track={music_title}&api_key={API_KEY}&format=json")
        response.raise_for_status()  # Raise an exception for HTTP errors
        data = response.json()
        tracks = data.get('results', {}).get('trackmatches', {}).get('track', [])
        if tracks:
            # Assuming the first track found is the one we want
            poster_url = tracks[0].get('image', [])[2].get('#text', '')
            track_url = tracks[0].get('url', '')
            return poster_url, track_url
        else:
            st.error("No results found for the music title.")
            return None, None
    except requests.exceptions.RequestException as e:
        st.error(f"Error fetching poster and track link: {e}")
        return None, None
    except ValueError as ve:
        st.error(f"Error parsing JSON response: {ve}")
        return None, None


def recommend1(musics):
    try:
        music_index = music[music['title'] == musics].index[0]
        distances = similarity[music_index]
        music_list = sorted(list(enumerate(distances)), reverse=True, key=lambda x: x[1])[1:6]
        recommended_music = []
        recommended_music_poster = []
        recommended_music_links = []
        for i in music_list:
            music_title = music.iloc[i[0]].title
            poster_link, track_link = fetch_poster_and_link(music_title)
            if poster_link:
                recommended_music.append(music_title)
                recommended_music_poster.append(poster_link)
                recommended_music_links.append(track_link)
        return recommended_music, recommended_music_poster, recommended_music_links
    except IndexError:
        st.error("Music not found or insufficient data for recommendation.")
        return [], [], []


music_dict = pickle.load(open(r'C:\Users\maury\autonetics\music\music_rec_new\musicrec.pkl', 'rb'))
music = pd.DataFrame(music_dict)


similarity = pickle.load(open(r'C:\Users\maury\autonetics\music\music_rec_new\similarities.pkl', 'rb'))

def main():
    st.set_page_config(page_title="Autonetics: Your Music Companion", page_icon=":musical_note:")

    st.markdown(
        """
        <style>
            .sidebar .sidebar-content {
                background-color: #2c3e50;
                color: white;
            }
            .sidebar .sidebar-content .block-container {
                color: white;
            }
            .sidebar .sidebar-content .block-container .stRadio {
                color: white;
            }
            .sidebar .sidebar-content .block-container .stRadio label {
                color: white;
            }
            .stButton>button {
                background-color: #3498db;
                color: white;
                border-radius: 5px;
                padding: 10px 20px;
                font-size: 16px;
                transition: background-color 0.3s;
            }
            .stButton>button:hover {
                background-color: #2980b9;
            }
            .home-background {
                background-image: linear-gradient(rgba(52, 73, 94, 0.8), rgba(52, 73, 94, 0.8)), url('https://example.com/background.jpg');
                background-size: cover;
                background-repeat: no-repeat;
                background-position: center;
                height: 100vh;
                display: flex;
                align-items: center;
                justify-content: center;
                text-align: center;
            }
            .home-content {
                color: white;
                padding: 40px;
                border-radius: 20px;
                background-color: rgba(0, 0, 0, 0.5);
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
            }
            .primary-text {
                color: #3498db;
            }
            .secondary-text {
                color: #2ecc71;
            }
            .about-us {
                margin-top: 50px;
                display: flex;
                justify-content: space-around;
                flex-wrap: wrap;
                background-image: linear-gradient(rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0.8)), url('https://example.com/about_us_background.jpg');
                background-size: cover;
                background-repeat: no-repeat;
                background-position: center;
                padding: 40px;
                border-radius: 20px;
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
            }
            .creator-card {
                background-color: rgba(255, 255, 255, 0.8);
                padding: 20px;
                border-radius: 10px;
                margin: 20px;
                max-width: 300px;
                text-align: center;
            }
            .creator-name {
                font-size: 24px;
                font-weight: bold;
                margin-bottom: 10px;
            }
            .creator-role {
                font-size: 18px;
                margin-bottom: 10px;
            }
            .creator-photo {
                width: 150px;
                height: 150px;
                border-radius: 50%;
                margin-bottom: 10px;
            }
            .references {
                margin-top: 50px;
                background-image: linear-gradient(rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0.8)), url('https://example.com/references_background.jpg');
                background-size: cover;
                background-repeat: no-repeat;
                background-position: center;
                padding: 40px;
                border-radius: 20px;
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
            }
            .reference-card {
                background-color: rgba(255, 255, 255, 0.8);
                padding: 20px;
                border-radius: 10px;
                margin-bottom: 20px;
            }
            .references h2 {
                color: #3498db;
                margin-bottom: 20px;
            }
        </style>
        """,
        unsafe_allow_html=True
    )

    st.sidebar.title("Menu")
    selected_page = st.sidebar.radio("Go to", ["Home", "Conversational Music Recommender Chatbot", "Text-to-Music Generator", "Music Recommender Spotyfi English", "Music Recommender Lastfm Hindi"])

    if selected_page == "Home":
        show_homepage()
    elif selected_page == "Conversational Music Recommender Chatbot":
        chat = genai.GenerativeModel("gemini-pro").start_chat(history=[])
        show_chatbot(chat)
    elif selected_page == "Text-to-Music Generator":
        show_text_to_music_generator()
    elif selected_page == "Music Recommender Spotyfi English":
        music, similarity = load_data()
        show_music_recommender(music, similarity)
    elif selected_page == "Music Recommender Lastfm Hindi":
        show_music_recommender_lastfm()

def load_data():
    # Load data from pickle files
    music = pickle.load(open('df.pkl','rb'))
    similarity = pickle.load(open('similarity.pkl','rb'))
    return music, similarity

def show_homepage():
    st.markdown(
        """
        <div class="home-background">
            <div class="home-content">
                <h1 class="primary-text">Welcome to Our Interactive Hub!</h1>
                <p>Explore a world of dynamic features tailored just for you:</p>
                <ul>
                    <li><strong>Autonetics:</strong> Engage in real-time conversations with Gemini, our friendly chatbot. Ask questions, seek assistance, or simply chat for fun!</li>
                    <li><strong>Text-to-Music Generator:</strong> Transform your words into melodies with our innovative text-to-music generator. Watch as your messages come to life in beautiful compositions.</li>
                    <li><strong>Personalized Music Recommendations:</strong> Discover your next favorite song with our music recommendation engine powered by LastFM and Spotify APIs. Tailored just for you based on your preferences. Hindi and English both available. LastFM is used for Bollywood categories and Spotify is used for Hollywood categories.</li>
                </ul>
                <p>Experience the future of interaction and entertainment. Start exploring now!</p>
            </div>
        </div>
        """,
        unsafe_allow_html=True
    )

    st.markdown(
        """
        <div class="about-us">
            <div class="creator-card">
                <img src="https://example.com/creator1.jpg" class="creator-photo">
                <div class="creator-name">John Doe</div>
                <div class="creator-role">Co-founder & Developer</div>
            </div>
            <div class="creator-card">
                <img src="https://example.com/creator2.jpg" class="creator-photo">
                <div class="creator-name">Jane Smith</div>
                <div class="creator-role">Co-founder & Designer</div>
            </div>
        </div>
        """,
        unsafe_allow_html=True
    )

    st.markdown(
        """
        <div class="references">
            <h2>References</h2>
            <div class="reference-card">
                <p>This project is inspired by:</p>
                <ul>
                    <li>Streamlit - For building interactive web apps with Python</li>
                    <li>LastFM API - For music data and recommendations</li>
                    <li>Spotify API - For music streaming and recommendations</li>
                </ul>
            </div>
        </div>
        """,
        unsafe_allow_html=True
    )

def show_text_to_music_generator():
    st.title("Text to Music Generator🎵")

    with st.expander("See explanation"):
        st.write("Music Generator app built using Meta's Audiocraft library. We are using Music Gen Small model.")

    text_area = st.text_area("Enter your description.......")
    time_slider = st.slider("Select time duration (In Seconds)", 0, 20, 10)

    if text_area and time_slider:
        st.json({
            'Your Description': text_area,
            'Selected Time Duration (in Seconds)': time_slider
        })

        st.subheader("Generated Music")
        music_tensors = generate_music_tensors(text_area, time_slider)
        save_music_file = save_audio(music_tensors)
        audio_file = open(save_music_file, 'rb')
        audio_bytes = audio_file.read()
        st.audio(audio_bytes)
        st.markdown(get_binary_file_downloader_html(save_music_file, 'Audio'))

def show_music_recommender(music, similarity):
    st.title("Music Recommender Spotyfi English")

    music_list = music['song'].values
    selected_song = st.selectbox(
        "Type or select a song from the dropdown",
        music_list
    )

    if st.button('Show Recommendation'):
        recommended_music_names, recommended_music_posters, _ = recommend(music, similarity, selected_song)
        col1, col2, col3, col4, col5= st.columns(5)
        for i in range(5):
            with col1:
                st.write(recommended_music_names[i])
                st.image(recommended_music_posters[i])
                st.markdown(f"[Listen on Spotify](https://open.spotify.com/search/{recommended_music_names[i].replace(' ', '%20')})")

def show_music_recommender_lastfm():
    st.header("Music Recommender")
    st.title('Music Recommender Lastfm Hindi')

    selected_music_name = st.selectbox('Select a music you like', music['title'].values)

    if st.button('Recommend'):
        names, posters, links = recommend1(selected_music_name)

        col1, col2, col3, col4, col5 = st.columns(5)

        for name, poster, link in zip(names, posters, links):
            with col1:
                st.text(name)
                st.markdown(f"[![Poster]({poster})]({link})")


if __name__ == '__main__':
    main()


def recommend(musics):
    try:
        music_index = music[music['title'] == musics].index[0]
        distances = similarity[music_index]
        music_list = sorted(list(enumerate(distances)), reverse=True, key=lambda x: x[1])[1:6]
        recommended_music = []
        recommended_music_poster = []
        recommended_music_links = []
        for i in music_list:
            music_title = music.iloc[i[0]].title
            poster_link, track_link = fetch_poster_and_link(music_title)
            if poster_link:
                recommended_music.append(music_title)
                recommended_music_poster.append(poster_link)
                recommended_music_links.append(track_link)
        return recommended_music, recommended_music_poster, recommended_music_links
    except IndexError:
        st.error("Music not found or insufficient data for recommendation.")
        return [], [], []


music_dict = pickle.load(open(r'C:\Users\maury\autonetics\music\music_rec_new\musicrec.pkl', 'rb'))
music = pd.DataFrame(music_dict)


similarity = pickle.load(open(r'C:\Users\maury\autonetics\music\music_rec_new\similarities.pkl', 'rb'))


# def main():
#     st.title("AUTONATICS: Your Music Companion")

def main():
    st.set_page_config(page_title="Gemini: Your Music Companion", page_icon=":musical_note:")

    st.markdown(
        """
        <style>
            .sidebar .sidebar-content {
                background-color: #2c3e50;
                color: white;
            }
            .sidebar .sidebar-content .block-container {
                color: white;
            }
            .sidebar .sidebar-content .block-container .stRadio {
                color: white;
            }
            .sidebar .sidebar-content .block-container .stRadio label {
                color: white;
            }
            .stButton>button {
                background-color: #3498db;
                color: white;
                border-radius: 5px;
                padding: 10px 20px;
                font-size: 16px;
                transition: background-color 0.3s;
            }
            .stButton>button:hover {
                background-color: #2980b9;
            }
            .home-background {
                background-image: linear-gradient(rgba(52, 73, 94, 0.8), rgba(52, 73, 94, 0.8)), url('https://example.com/background.jpg');
                background-size: cover;
                background-repeat: no-repeat;
                background-position: center;
                height: 100vh;
                display: flex;
                align-items: center;
                justify-content: center;
                text-align: center;
            }
            .home-content {
                color: white;
                padding: 40px;
                border-radius: 20px;
                background-color: rgba(0, 0, 0, 0.5);
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
            }
            .primary-text {
                color: #3498db;
            }
            .secondary-text {
                color: #2ecc71;
            }
            .about-us {
                margin-top: 50px;
                display: flex;
                justify-content: space-around;
                flex-wrap: wrap;
                background-image: linear-gradient(rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0.8)), url('https://example.com/about_us_background.jpg');
                background-size: cover;
                background-repeat: no-repeat;
                background-position: center;
                padding: 40px;
                border-radius: 20px;
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
            }
            .creator-card {
                background-color: rgba(255, 255, 255, 0.8);
                padding: 20px;
                border-radius: 10px;
                margin: 20px;
                max-width: 300px;
                text-align: center;
            }
            .creator-name {
                font-size: 24px;
                font-weight: bold;
                margin-bottom: 10px;
            }
            .creator-role {
                font-size: 18px;
                margin-bottom: 10px;
            }
            .creator-photo {
                width: 150px;
                height: 150px;
                border-radius: 50%;
                margin-bottom: 10px;
            }
            .references {
                margin-top: 50px;
                background-image: linear-gradient(rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0.8)), url('https://example.com/references_background.jpg');
                background-size: cover;
                background-repeat: no-repeat;
                background-position: center;
                padding: 40px;
                border-radius: 20px;
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
            }
            .reference-card {
                background-color: rgba(255, 255, 255, 0.8);
                padding: 20px;
                border-radius: 10px;
                margin-bottom: 20px;
            }
            .references h2 {
                color: #3498db;
                margin-bottom: 20px;
            }
        </style>
        """,
        unsafe_allow_html=True
    )


    st.sidebar.title("Menu")
    selected_page = st.sidebar.radio("Go to", ["Home", "Conversation Chatbot", "Text-to-Music Generator", "Music Recommender Spotyfi English", "Music Recommender Lastfm Hindi"])

    if selected_page == "Home":
        show_homepage()
    elif selected_page == "Conversation Chatbot":
        show_chatbot()
    elif selected_page == "Text-to-Music Generator":
        show_text_to_music_generator()
    elif selected_page == "Music Recommender Spotyfi English":
        show_music_recommender_spotyfi()
    elif selected_page == "Music Recommender Lastfm Hindi":
        show_music_recommender_lastfm()



def show_homepage():
    st.markdown(
        """
        <div class="home-background">
            <div class="home-content">
                <h1 class="primary-text">Welcome to Our Interactive Hub!</h1>
                <p>Explore a world of dynamic features tailored just for you:</p>
                <ul>
                    <li><strong>Autonetics:</strong> Engage in real-time conversations with Gemini, our friendly chatbot. Ask questions, seek assistance, or simply chat for fun!</li>
                    <li><strong>Text-to-Music Generator:</strong> Transform your words into melodies with our innovative text-to-music generator. Watch as your messages come to life in beautiful compositions.</li>
                    <li><strong>Personalized Music Recommendations:</strong> Discover your next favorite song with our music recommendation engine powered by LastFM and Spotify APIs. Tailored just for you based on your preferences. Hindi and English both available. LastFM is used for Bollywood categories and Spotify is used for Hollywood categories.</li>
                </ul>
                <p>Experience the future of interaction and entertainment. Start exploring now!</p>
            </div>
        </div>
        """,
        unsafe_allow_html=True
    )

    st.markdown(
        """
        <div class="about-us">
            <div class="creator-card">
                <img src="https://example.com/creator1.jpg" class="creator-photo">
                <div class="creator-name">John Doe</div>
                <div class="creator-role">Co-founder & Developer</div>
            </div>
            <div class="creator-card">
                <img src="https://example.com/creator2.jpg" class="creator-photo">
                <div class="creator-name">Jane Smith</div>
                <div class="creator-role">Co-founder & Designer</div>
            </div>
        </div>
        """,
        unsafe_allow_html=True
    )

    st.markdown(
        """
        <div class="references">
            <h2>References</h2>
            <div class="reference-card">
                <p>This project is inspired by:</p>
                <ul>
                    <li>Streamlit - For building interactive web apps with Python</li>
                    <li>LastFM API - For music data and recommendations</li>
                    <li>Spotify API - For music streaming and recommendations</li>
                </ul>
            </div>
        </div>
        """,
        unsafe_allow_html=True
    )



def show_chatbot():
    st.header("Conversational Music Recommender Chatbot")
    input_text = st.text_input("Input: ", key="chat_input")
    submit_button = st.button("Ask the question")

    if submit_button:
        response = get_gemini_response(input_text)
        st.subheader("The Response is")
        st.write(response)


def show_text_to_music_generator():
    st.title("Text to Music Generator🎵")

    with st.expander("See explanation"):
        st.write("Music Generator app built using Meta's Audiocraft library. We are using Music Gen Small model.")

    text_area = st.text_area("Enter your description.......")
    time_slider = st.slider("Select time duration (In Seconds)", 0, 20, 10)

    if text_area and time_slider:
        st.json({
            'Your Description': text_area,
            'Selected Time Duration (in Seconds)': time_slider
        })

        st.subheader("Generated Music")
        music_tensors = generate_music_tensors(text_area, time_slider)
        save_music_file = save_audio(music_tensors)
        audio_file = open(save_music_file, 'rb')
        audio_bytes = audio_file.read()
        st.audio(audio_bytes)
        st.markdown(get_binary_file_downloader_html(save_music_file, 'Audio'))


def show_music_recommender_spotyfi():
    st.header("Music Recommender Spotyfi English")
    st.write("This feature is coming soon...")


def show_music_recommender_lastfm():
    st.header("Music Recommender")
    st.title('Music Recommender Lastfm Hindi')

    selected_music_name = st.selectbox('Select a music you like', music['title'].values)

    if st.button('Recommend'):
        names, posters, links = recommend(selected_music_name)

        col1, col2, col3, col4, col5 = st.columns(5)

        for name, poster, link in zip(names, posters, links):
            with col1:
                st.text(name)
                st.markdown(f"[![Poster]({poster})]({link})")


if __name__ == "__main__":
    main()
